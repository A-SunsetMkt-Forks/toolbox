{"version":3,"file":"static/js/542.90b2f63c.chunk.js","mappings":"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","sources":["components/ContentCopyAdornment.tsx","components/Block.tsx","scripts/Random.ts","scripts/RandomStringUtils.ts","pages/Random.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { IconButton, InputAdornment, Snackbar } from '@mui/material';\nimport { ContentCopy } from '@mui/icons-material';\n// @ts-ignore\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface Props {\n  content?: string | undefined;\n  onCopy?: Function | undefined;\n}\n\nexport default function ContentCopyAdornment({ content, onCopy }: Props) {\n  const [open, setOpen] = useState<boolean>(false);\n  const handleOnCopy = (text: string, result: DataTransfer) => {\n    setOpen(true);\n    if (onCopy) {\n      onCopy(text, result);\n    }\n  };\n\n  const handleClose = () => {\n    setOpen(!open);\n  };\n  return (\n    <React.Fragment>\n      <CopyToClipboard text={content} onCopy={handleOnCopy}>\n        <InputAdornment position={'end'}>\n          <IconButton aria-label={'Copy content'}>\n            <ContentCopy />\n          </IconButton>\n        </InputAdornment>\n      </CopyToClipboard>\n\n      <Snackbar open={open} onClose={handleClose} autoHideDuration={3000} message={'复制成功'} />\n    </React.Fragment>\n  );\n}\n","import { styled } from '@mui/system';\n\nexport const Block = styled('div')({\n  position: 'relative',\n  padding: '24px',\n  margin: 'auto',\n  border: '1px solid rgba(0, 0, 0, 0.12)',\n  borderRadius: '10px',\n});\n","/**\n * 生成整数随机数\n * 包含最小值，不含最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（不包含）\n * @return {number}\n */\nexport function random(min: number, max: number): number {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n/**\n * 生成整数随机数\n * 同时包含最小值和最大值的随机数\n * @param min 最小值（包含）\n * @param max 最大值（包含）\n * @return {number}\n */\nexport function randomInclusive(min: number, max: number): number {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","import {random as randomInt} from './Random';\nimport * as _ from 'lodash';\n\n// prettier-ignore\nexport const NUMERIC_CHARS: string[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n// prettier-ignore\nexport const LOWERCASE_CHARS: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n// prettier-ignore\nexport const UPPERCASE_CHARS: string[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n// prettier-ignore\nexport const SYMBOL_CHARS: string[] = ['!', '@', '#', '$', '%', '^', '&', '*'];\n\nconst EMPTY_CHAR = '';\n\nconst random = function (length: number): string {\n  return generator(length, true, true, true, false);\n};\n\nconst randomAlphabetic = function (length: number): string {\n  return generator(length, false, true, true, false);\n};\n\nconst randomNumber = function (length: number): string {\n  return generator(length, true, false, false, false);\n};\n\nconst generator = function (\n  length: number,\n  numeric: boolean = true,\n  lowercase: boolean = true,\n  uppercase: boolean = true,\n  symbol: boolean = false\n): string {\n  if (typeof length == 'undefined' || length == null || length <= 0) {\n    return EMPTY_CHAR;\n  }\n  let chars: string[] = [];\n  if (numeric) {\n    chars = chars.concat(NUMERIC_CHARS);\n  }\n  if (lowercase) {\n    chars = chars.concat(LOWERCASE_CHARS);\n  }\n  if (uppercase) {\n    chars = chars.concat(UPPERCASE_CHARS);\n  }\n  if (symbol) {\n    chars = chars.concat(SYMBOL_CHARS);\n  }\n  if (chars.length < 1) {\n    return EMPTY_CHAR;\n  } else {\n    _.shuffle(chars);\n  }\n  let str: string = '';\n  for (let i = 0; i < length; i++) {\n    str += chars[randomInt(0, chars.length)];\n  }\n  return str;\n};\n\nexport {random, randomAlphabetic, randomNumber, generator};\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Container,\n  FormControlLabel,\n  FormGroup,\n  Slider,\n  TextField,\n} from '@mui/material';\n\nimport { Block } from '../components/Block';\nimport { Refresh } from '@mui/icons-material';\nimport ContentCopyAdornment from '../components/ContentCopyAdornment';\nimport { generator } from '../scripts/RandomStringUtils';\n\nexport default function Random() {\n  const [randomString, setRandomString] = useState<string>('');\n  const [numeric, setNumeric] = useState<boolean>(true);\n  const [upperCase, setUpperCase] = useState<boolean>(true);\n  const [lowerCase, setLowerCase] = useState<boolean>(true);\n  const [symbol, setSymbol] = useState<boolean>(false);\n  const [length, setLength] = useState<number>(8);\n  const refresh = () => {\n    const varchar = generator(length, numeric, lowerCase, upperCase, symbol);\n    setRandomString(varchar);\n  };\n\n  useEffect(refresh, [length, numeric, upperCase, lowerCase, symbol]);\n\n  const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n  return (\n    <Container>\n      <Block sx={{ mt: 2 }}>\n        <FormGroup row>\n          <FormControlLabel\n            control={<Checkbox {...label} defaultChecked />}\n            label={'数字 0 ～ 9'}\n            value={numeric}\n            onChange={() => {\n              setNumeric(!numeric);\n            }}\n          />\n          <FormControlLabel\n            control={<Checkbox {...label} defaultChecked />}\n            label={'小写字母 a ~ z'}\n            value={lowerCase}\n            onChange={() => {\n              setLowerCase(!lowerCase);\n            }}\n          />\n          <FormControlLabel\n            control={<Checkbox {...label} defaultChecked />}\n            label={'大写字母 A ~ Z'}\n            value={upperCase}\n            onChange={() => {\n              setUpperCase(!upperCase);\n            }}\n          />\n          <FormControlLabel\n            control={<Checkbox {...label} />}\n            label={'符号'}\n            value={symbol}\n            onChange={() => {\n              setSymbol(!symbol);\n            }}\n          />\n          <TextField label={'符号'} value={'!@#$%^&*'} size={'small'} />\n        </FormGroup>\n        <Box sx={{ mt: 3 }}>\n          <Slider\n            defaultValue={8}\n            valueLabelDisplay={'on'}\n            value={length}\n            min={6}\n            max={64}\n            step={1}\n            marks={[\n              { value: 6, label: '6' },\n              { value: 8, label: '8' },\n              { value: 16, label: '16' },\n              { value: 32, label: '32' },\n              { value: 64, label: '64' },\n            ]}\n            onChange={(event, value) => {\n              if (typeof value === 'number') {\n                setLength(value);\n              }\n            }}\n          />\n        </Box>\n\n        <Box sx={{ mt: 2 }}>\n          <TextField\n            variant={'outlined'}\n            label={'随机结果'}\n            value={randomString}\n            InputProps={{\n              endAdornment: <ContentCopyAdornment content={randomString} />,\n            }}\n            onChange={(event) => {\n              setRandomString(event.target.value);\n            }}\n            fullWidth\n          />\n        </Box>\n        <Box sx={{ mt: 2 }}>\n          <ButtonGroup>\n            <Button startIcon={<Refresh />} onClick={refresh}>\n              刷新\n            </Button>\n          </ButtonGroup>\n        </Box>\n      </Block>\n    </Container>\n  );\n}\n"],"names":["ContentCopyAdornment","content","onCopy","useState","open","setOpen","CopyToClipboard","text","result","position","onClose","autoHideDuration","message","Block","styled","padding","margin","border","borderRadius","random","min","max","Math","ceil","floor","NUMERIC_CHARS","LOWERCASE_CHARS","UPPERCASE_CHARS","SYMBOL_CHARS","generator","length","numeric","lowercase","uppercase","symbol","chars","concat","_","str","i","randomInt","Random","randomString","setRandomString","setNumeric","upperCase","setUpperCase","lowerCase","setLowerCase","setSymbol","setLength","refresh","varchar","useEffect","label","inputProps","Container","sx","mt","FormGroup","row","FormControlLabel","control","Checkbox","defaultChecked","value","onChange","TextField","size","Box","Slider","defaultValue","valueLabelDisplay","step","marks","event","variant","InputProps","endAdornment","target","fullWidth","ButtonGroup","Button","startIcon","Refresh","onClick"],"sourceRoot":""}